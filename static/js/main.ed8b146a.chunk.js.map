{"version":3,"sources":["Bottle.glb","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","color","colors","this","setState","Math","floor","random","length","xrextras-gesture-detector","xrextras-almost-there","xrextras-loading","xrextras-runtime-error","renderer","xrweb","id","src","Bottle","primitive","position","raycaster","cursor","light","xrextras-attach","shadow","type","intensity","camera","look-controls","orbit-controls","gltf-model","animation","xrextras-hold-drag","xrextras-two-finger-rotate","xrextras-pinch-scale","scale","rotation","width","height","material","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAe,MAA0B,mC,OCMpBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,OAFL,E,+CAKnB,WACE,IAAMC,EAAS,CAAC,MAAO,SAAU,SAAU,QAAS,QACpDC,KAAKC,SAAS,CACZH,MAAOC,EAAOG,KAAKC,MAAMD,KAAKE,SAAWL,EAAOM,a,oBAIpD,WACE,OACE,eAAC,QAAD,CACEC,6BAAA,EACAC,yBAAA,EACAC,oBAAA,EACAC,0BAAA,EACAC,SAAS,wBACTC,OAAK,EANP,UAQE,qCACE,qBACEC,GAAG,gBACHC,IAAI,qDAEN,qBACED,GAAG,aACHC,IAAI,mDAGN,8BAAcD,GAAG,MAAMC,IAAKC,OA0B9B,cAAC,SAAD,CACEC,UAAU,WACVH,GAAG,SACHI,SAAS,QACTC,UAAU,mBACVC,OAAO,mCAGT,cAAC,SAAD,CACEH,UAAU,UACVI,MAAM,wIAQNC,kBAAgB,iCAChBC,QAAM,IAER,cAAC,SAAD,CAAQN,UAAU,UAAUO,KAAK,UAAUC,UAAU,QACrD,cAAC,SAAD,CACEX,GAAG,QACHY,QAAM,EACNC,iBAAA,EACAC,iBAAe,8CACfC,aAAW,OAEXX,SAAS,UACTY,UAAU,0DACVC,sBAAA,EACAC,8BAAA,EACAC,wBAAA,EACAC,MAAM,QACNX,OAAO,mBAGT,cAAC,SAAD,CACEN,UAAU,UACVH,GAAG,SACHqB,SAAS,UACTC,MAAM,OACNC,OAAO,OACPC,SAAS,iBACTf,QAAM,W,GAxGiBgB,IAAMC,WCMxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ed8b146a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Bottle.c9196ed9.glb\";","import 'aframe';\n\nimport { Entity, Scene } from 'aframe-react';\nimport React from 'react';\nimport Bottle from './Bottle.glb';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { color: 'red' };\n  }\n\n  changeColor() {\n    const colors = ['red', 'orange', 'yellow', 'green', 'blue'];\n    this.setState({\n      color: colors[Math.floor(Math.random() * colors.length)],\n    });\n  }\n\n  render() {\n    return (\n      <Scene\n        xrextras-gesture-detector\n        xrextras-almost-there\n        xrextras-loading\n        xrextras-runtime-error\n        renderer=\"colorManagement: true\"\n        xrweb\n      >\n        <a-assets>\n          <img\n            id=\"groundTexture\"\n            src=\"https://cdn.aframe.io/a-painter/images/floor.jpg\"\n          />\n          <img\n            id=\"skyTexture\"\n            src=\"https://cdn.aframe.io/a-painter/images/sky.jpg\"\n          />\n\n          <a-asset-item id=\"mod\" src={Bottle}></a-asset-item>\n        </a-assets>\n\n        {/* <Entity\n          primitive=\"a-plane\"\n          src=\"#groundTexture\"\n          rotation=\"-90 0 0\"\n          height=\"100\"\n          width=\"100\"\n        />\n        <Entity primitive=\"a-light\" type=\"ambient\" color=\"#445451\" />\n        <Entity\n          primitive=\"a-light\"\n          type=\"point\"\n          intensity=\"2\"\n          position=\"2 4 4\"\n        />\n        <Entity\n          primitive=\"a-sky\"\n          height=\"2048\"\n          radius=\"30\"\n          src=\"#skyTexture\"\n          theta-length=\"90\"\n          width=\"2048\"\n        />\n        <Entity particle-system={{ preset: 'snow', particleCount: 2000 }} /> */}\n        <Entity\n          primitive=\"a-camera\"\n          id=\"camera\"\n          position=\"0 8 8\"\n          raycaster=\"objects: .cantap\"\n          cursor=\"fuse: false; rayOrigin: mouse;\"\n        ></Entity>\n\n        <Entity\n          primitive=\"a-light\"\n          light=\"\n      type: directional;\n      intensity: 0.8;\n      castShadow: true;\n      shadowMapHeight:2048;\n      shadowMapWidth:2048;\n      shadowCameraTop: 10;\n      target: #model;\"\n          xrextras-attach=\"target: model; offset: 1 15 3;\"\n          shadow\n        />\n        <Entity primitive=\"a-light\" type=\"ambient\" intensity=\"0.7\" />\n        <Entity\n          id=\"myMod\"\n          camera\n          look-controls\n          orbit-controls=\"target: 0 1.6 -0.5; initialPosition: 0 5 15\"\n          gltf-model=\"#mod\"\n          // geometry={{ primitive: 'box', width: 5, height: 0 }}\n          position=\"0 -3 -3\"\n          animation=\"property: rotation; to: 0 360 0; loop: true; dur: 10000\"\n          xrextras-hold-drag\n          xrextras-two-finger-rotate\n          xrextras-pinch-scale\n          scale=\"3 3 3\"\n          shadow=\"receive: false\"\n        />\n\n        <Entity\n          primitive=\"a-plane\"\n          id=\"ground\"\n          rotation=\"-90 0 0\"\n          width=\"1000\"\n          height=\"1000\"\n          material=\"shader: shadow\"\n          shadow\n        ></Entity>\n        {/* \n        <Entity\n          text={{ value: 'Hello, A-Frame React!', align: 'center' }}\n          position={{ x: 0, y: 2, z: -1 }}\n        /> */}\n\n        {/* <Entity id=\"box\"\n          geometry={{primitive: 'box'}}\n          material={{color: this.state.color, opacity: 0.6}}\n          animation__rotate={{property: 'rotation', dur: 2000, loop: true, to: '360 360 360'}}\n          animation__scale={{property: 'scale', dir: 'alternate', dur: 100, loop: true, to: '1.1 1.1 1.1'}}\n          position={{x: 0, y: 1, z: -3}}\n          events={{click: this.changeColor.bind(this)}}>\n          <Entity animation__scale={{property: 'scale', dir: 'alternate', dur: 100, loop: true, to: '2 2 2'}}\n                  geometry={{primitive: 'box', depth: 0.2, height: 0.2, width: 0.2}}\n                  material={{color: '#24CAFF'}}/>\n        </Entity> */}\n\n        {/* <Entity primitive=\"a-camera\">\n          <Entity\n            primitive=\"a-cursor\"\n            id=\"cursor\"\n            animation__click=\"property: scale; from: 0.1 0.1 0.1; to: 1 1 1; easing: easeInCubic; dur: 150; startEvents: click\"\n            animation__clickreset=\"property: scale; to: 0.1 0.1 0.1; dur: 1; startEvents: animationcomplete__click\"\n            animation__fusing=\"property: scale; from: 1 1 1; to: 0.1 0.1 0.1; easing: easeInCubic; dur: 150; startEvents: fusing\"\n          ></Entity>\n        </Entity> */}\n        {/* <Entity primitive=\"a-camera\">\n          <Entity\n            primitive=\"a-cursor\"\n            animation__click={{\n              property: 'scale',\n              startEvents: 'click',\n              from: '0.1 0.1 0.1',\n              to: '2 2 2',\n              dur: 150,\n            }}\n          />\n        </Entity> */}\n      </Scene>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}